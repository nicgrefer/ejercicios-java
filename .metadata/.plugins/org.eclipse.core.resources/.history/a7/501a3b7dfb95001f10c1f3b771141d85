package clasesextra;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.stream.Stream;

public class Fechas {

    public static void main(String[] args) {
        LocalDate fechaHoy = LocalDate.now();
        
        fechaHoy = fechaHoy.plusDays(5);
        
        System.out.println(fechaHoy.getDayOfMonth() + "/" + fechaHoy.getMonthValue() + "/" + fechaHoy.getYear());
        
        LocalDate fecha2 = LocalDate.of(2021, 12, 25);
        System.out.println(fecha2.minusYears(3));
        
        
        if (fechaHoy.isAfter(fecha2))
            System.out.println("La fecha de hoy es posterior a la fecha 2");
        else
            System.out.println("La fecha de hoy es anterior a la fecha 2");
        
        
        
        Scanner sc = new Scanner(System.in);
		// Patrón para las fechas
        Pattern patronFechas=Pattern.compile("\\d{2}/\\d{2}/\\d{4}");
		System.out.println("Introduce un email:");
		String fecha=sc.nextLine();
		if (fecha.matches(patronFechas.pattern())){
			System.out.print("fecha correcto");
			
		}else {
			System.err.print("fechas no valido");
		}
        
        
        
        
        
        
   /*
        String patternFecha = "dd/MM/yyyy";
        DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern(patternFecha);
        String cadenaFecha2 = fecha2.format(formatoFecha);
        System.out.println(cadenaFecha2);
        
        String date1 = "16/Aug/2016";
        System.out.println(Locale.getDefault());
        
        LocalDate fecha3 = LocalDate.of(2023, Month.NOVEMBER, 23);
        
        long diasTranscurridos = Duration.between(fecha2.atStartOfDay(), fecha3.atStartOfDay()).toDays();
        System.out.println(diasTranscurridos);
        
        LocalDateTime fechaHora = LocalDateTime.now();
        System.out.println(fechaHora);
        
        System.out.println(fechaHora.getHour());
        
        Stream.iterate(fecha3, fecha -> fecha.plusDays(1)).limit(10).forEach(System.out::println);
        
        // Formas de restar fechas:
        // Restar dos fechas LocalDate
        // int dias = (int) LocalDate.now().until(LocalDate.parse(fechaNacimiento), java.time.temporal.ChronoUnit.DAYS);
        // También 
        // int dias2 = (int) ChronoUnit.DAYS.between(LocalDate.now(), LocalDate.parse(fechaNacimiento));
        // También otra forma con toEpochDay
        // int dias3 = (int) (LocalDate.parse(fechaNacimiento).toEpochDay() - LocalDate.now().toEpochDay());
   */
    }
}
