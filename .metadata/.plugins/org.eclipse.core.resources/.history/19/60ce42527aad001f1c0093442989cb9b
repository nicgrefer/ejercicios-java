package Practica1_Contraseñas;

import java.security.SecureRandom;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Random;
import java.util.Scanner;
import java.util.regex.Pattern;

public class GeneraContraseña_Cubillo_Jové_Nicolás {

	// Método para comprobar la seguridad de las contraseñas
		public void comprobadorTamanioCodico(String nombre, String apellido1, String apellido2, String dniCompleto,
				String fechaNacimiento) {
			String RESET = "\u001B[0m";
			String ROJO = "\u001B[31m";
			String AMARILLO = "\u001B[33m";
			String VERDE = "\u001B[32m";
			String seguridadContrasena = "";

		    for (int i = 1; i <= 3; i++) { 
		        String contrasena = TipoContrasena(nombre, apellido1, apellido2, dniCompleto, fechaNacimiento);
		        int longCodigo = contrasena.length();

		        if (longCodigo >= 4 && longCodigo < 6) {
		            seguridadContrasena = ROJO + "Poco segura" + RESET;
		        } else if (longCodigo >= 6) {
		            if (contieneCaracteresEspeciales(contrasena) && contieneMayusculas(contrasena) && contieneDigitos(contrasena) && contieneMinusculas(contrasena)) {
		                seguridadContrasena = VERDE + "Muy segura" + RESET;
		            } else {
		                seguridadContrasena = AMARILLO + "Segura" + RESET;
		            }
		        }

		        System.out.println("La contraseña es: " + contrasena + " con un nivel de seguridad: " + seguridadContrasena);
		    }
		}
	
		// Comprobamos si la contraseña resultante tiene caracteres especiales.
		public boolean contieneCaracteresEspeciales(String contrasena) {
			String caracteresEspeciales = "!@#$%/&()=-_.*";
			for (int i = 0; i < contrasena.length(); i++) {
				if (caracteresEspeciales.contains(String.valueOf(contrasena.charAt(i)))) {
					return true;
				}
			}
			return false;
		}

		// Metodo para comprobar si la contrasena contiene mayusculas
		public boolean contieneMayusculas(String contrasena) {
			for (int i = 0; i < contrasena.length(); i++) {
				if (Character.isUpperCase(contrasena.charAt(i))) {
					return true;
				}
			}
			return false;
		}

		// Metodo para comprobar si la contrasena contiene minusculas
		public boolean contieneMinusculas(String contrasena) {
			for (int i = 0; i < contrasena.length(); i++) {
				if (Character.isLowerCase(contrasena.charAt(i))) {
					return true;
				}
			}
			return false;
		}

		// Metodo para comprobar si la contrasena contiene digitos
		public boolean contieneDigitos(String contrasena) {
			String digitos = "1234567890";
			for (int i = 0; i < contrasena.length(); i++) {
				if (digitos.contains(String.valueOf(contrasena.charAt(i)))) {
					return true;
				}
			}
			return false;
		}

		//Metodo para comprobar Strings
		public String compruebaTexto(String texto) {
			Scanner sc = new Scanner(System.in);
			Pattern validoString = Pattern.compile("[A-ZÁÉÍÓÚ][a-záéíóúñÁÉÍÓÚÑ]+"); // Al menos 2 caracteres, el primero
																					// mayúscula.
			if (texto.length() < 3 || !validoString.matcher(texto).matches()) {
				System.err.println("Valor no válido. Debe empezar con mayúscula y tener al menos 3 caracteres.");
			}
		 while (texto.length() < 3 || !validoString.matcher(texto).matches());
		return texto;
		}

		
		//Metodo para comprobar DNI 
		public String comprobarDNI{
			String dni="";
			
			Scanner sc = new Scanner(System.in);
			String letras = "TRWAGMYFPDXBNJZSQVHLCKE";
			char letracorrecta = 0; // letra DNI calculada
			do {
				System.out.println("Introduce un DNI (sin letra): ");
				dni = sc.next().trim();
				if (dni.matches("\\d{8}")) {
					int numerodni = Integer.parseInt(dni);
					int resto = numerodni % 23;
					letracorrecta = letras.charAt(resto);
					dniCompleto = dni + letracorrecta;
					System.out.println("DNI completo: " + dniCompleto);
				} else {
					System.err.println("DNI no válido. Inténtalo de nuevo.");
				}

			} while (dni.length() != 8 || !dni.matches("\\d{8}"));
		}
		
		
		public static void main(String[] args) {
			// Peticion de datos
			Scanner sc = new Scanner(System.in);
			String nombre;
			String apellido1;
			String apellido2;
			String dniCompleto = "";
			String fechaNacimiento;
			Pattern validoString = Pattern.compile("[A-ZÁÉÍÓÚ][a-záéíóúñÁÉÍÓÚÑ]+"); // Al menos 2 caracteres, el primero
																					// mayúscula.

			GeneraContraseña_Cubillo_Jové_Nicolás app=new GeneraContraseña_Cubillo_Jové_Nicolás();
			
			// Validación del nombre
			
				System.out.println("Introduce el nombre: ");
				nombre = app.compruebaTexto(null);
		
			// Validación del primer apellido
				System.out.println("Introduce su 1º apellido: ");
				apellido1 = app.compruebaTexto(null);

			// Validación del segundo apellido
				
				System.out.println("Introduce su 2º apellido: ");
				apellido2 = app.compruebaTexto(null);
			
			//Validacion DNI
				System.out.println("Introduce un DNI (sin letra): ");
				dniCompleto=
			}
}
